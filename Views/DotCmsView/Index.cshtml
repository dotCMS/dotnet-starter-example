@model RazorPagesDotCMS.Models.PageResponse
@{
    ViewData["Title"] = Model?.Entity?.Page?.Title ?? "DotCMS View";
    var layout = Model?.Entity?.Layout;
    var page = Model?.Entity?.Page;
    var containers = Model?.Entity?.Containers;

    // Helper function to get accept types from container structure
    string GetAcceptTypes(ContainerStructure containerStructure) {
        return string.Join(",", containerStructure.ContainerStructures?.Select(cs => cs.ContentTypeVar) ?? Array.Empty<string>());
    }
}


    <div class="body-wrapper">
        @{
            var mainColumn = layout?.Body;
            var sidebar = layout?.Sidebar;
            
            // Handle sidebar if present
            if (sidebar != null)
            {
                <div class="container">
                    <div class="grid">
                        @* Sidebar implementation would go here *@
                    </div>
                </div>
            }
            
            // Process rows in the main column
            if (mainColumn?.Rows != null && mainColumn.Rows.Count > 0)
            {
                int rowCount = 0;
                
                foreach (var row in mainColumn.Rows)
                {
                    rowCount++;
                    int rowLeftOffset = 1;
                    
                    <section id="section-@rowCount" class="section @row.StyleClass">
                        <div class="container">
                            <div class="grid">
                                @foreach (var column in row.Columns)
                                {
                                    string columnClass = $"col-lg-{column.Width ?? 12}";
                                    string offsetClass = "";
                                    
                                    // Calculate offset
                                    if (rowLeftOffset != column.LeftOffset)
                                    {
                                        int offset = column.LeftOffset.GetValueOrDefault() - rowLeftOffset;
                                        if (offset > 0)
                                        {
                                            offsetClass = $"offset-lg-{offset}";
                                        }
                                    }
                                    
                                    rowLeftOffset = column.LeftOffset.GetValueOrDefault() + column.Width.GetValueOrDefault();
                                    
                                    <div class="@columnClass @offsetClass @column.StyleClass" style="word-break: break-all;">
                                        @if (column.Containers != null)
                                        {
                                            foreach (var container in column.Containers)
                                            {
                                                if (containers != null && container.Identifier != null && containers.TryGetValue(container.Identifier, out var containerStructure))
                                                {
                                                    var acceptTypes = GetAcceptTypes(containerStructure);
                                                    <fieldset class="container-content" 
                                                            data-dot-object="container"
                                                            data-dot-identifier="@(containerStructure.Container?.Path ?? container.Identifier)"
                                                            data-dot-accept-types="@acceptTypes"
                                                            data-max-contentlets="@containerStructure.Container?.MaxContentlets"
                                                            data-dot-uuid="@container.Uuid">
                                                        <legend>@containerStructure.Container?.Title</legend>
                                                        
                                                        @if (containerStructure.Contentlets != null)
                                                        {
                                                            string containerInstanceId = container.ContainerInstanceId;
                                                            
                                                            if (containerInstanceId != null && containerStructure.Contentlets.TryGetValue(containerInstanceId, out var instanceContentlets))
                                                            {
                                                                foreach (var contentlet in instanceContentlets)
                                                                {
                                                                    <div data-dot-object="contentlet"
                                                                         data-dot-identifier="@contentlet.Identifier"
                                                                         data-dot-basetype="@contentlet.BaseType"
                                                                         data-dot-title="@contentlet.Title"
                                                                         data-dot-inode="@contentlet.Inode"
                                                                         data-dot-type="@contentlet.ContentType"
                                                                        data-dot-on-number-of-pages="@contentlet.OnNumberOfPages"
                                                                         data-dot-container='@Json.Serialize(new {
                                                                             acceptTypes,
                                                                             identifier = containerStructure.Container?.Path ?? container.Identifier,
                                                                             maxContentlets = containerStructure.Container?.MaxContentlets,
                                                                             variantId = "DEFAULT",
                                                                             uuid = container.Uuid
                                                                         })'>
                                                                        <contentlet-renderer contentlet="contentlet"></contentlet-renderer>
                                                                    </div>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <div class="no-contentlets">
                                                                    <p>No contentlets found for this container instance.</p>
                                                                </div>
                                                            }
                                                        }
                                                    </fieldset>
                                                }
                                            }
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </section>
                }
            }
            else
            {
                <div class="container">
                    <div class="grid">
                        <div class="col-12">
                            <p>No layout rows found.</p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
